/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import card.ModelCard;
import card.icon.GoogleMaterialDesignIcons;
import card.icon.IconFontSwing;

import connect.ConnectDB;
import dao.ChiTietHoaDon_DAO;
import dao.HoaDon_DAO;
import entity.ThangVaDoanhThu;
import gui.chart.ModelChart;
import java.awt.Color;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;


public class ThongKeDoanhThu extends javax.swing.JPanel {

    private ArrayList<ThangVaDoanhThu> arrThang;
    private ChiTietHoaDon_DAO cthd;
    private HoaDon_DAO hd;
    public ThongKeDoanhThu() throws SQLException {
        initComponents();
        ConnectDB.connect();
        ThangTheoDoanhThu();
        initCardData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shadowRenderer1 = new gui.swing.ShadowRenderer();
        tabbedPaneCustom1 = new gui.swing.TabbedPaneCustom();
        jPanel1 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        btnExcel = new javax.swing.JButton();
        btnNgay = new javax.swing.JButton();
        btnThang = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        card1 = new card.Card();
        card2 = new card.Card();
        jLabel7 = new javax.swing.JLabel();
        lbCaoNhat = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbThapNhat = new javax.swing.JLabel();
        card3 = new card.Card();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tabbedPaneCustom2 = new gui.swing.TabbedPaneCustom();
        jPanel3 = new javax.swing.JPanel();
        chart1 = new gui.chart.Chart();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lọc: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N
        jPanel1.setEnabled(false);

        btnExcel.setBackground(new java.awt.Color(0, 204, 51));
        btnExcel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_Nhan/icons8-excel-48.png"))); // NOI18N
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        btnNgay.setText("Theo ngày");
        btnNgay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNgayMouseClicked(evt);
            }
        });
        btnNgay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNgayActionPerformed(evt);
            }
        });

        btnThang.setText("Theo tháng");
        btnThang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnThangMouseClicked(evt);
            }
        });
        btnThang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExcel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnNgay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnThang)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThang)
                    .addComponent(btnNgay))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        jLabel7.setText("Cao nhất:");

        lbCaoNhat.setText("0");

        jLabel8.setText("Thấp nhất:");

        lbThapNhat.setText("0");

        jLabel1.setText("Chỉ tiêu: ");

        jLabel2.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(12, 12, 12)
                        .addComponent(lbCaoNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(lbThapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(card2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(card3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(card1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lbCaoNhat)
                    .addComponent(jLabel8)
                    .addComponent(lbThapNhat)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart1, javax.swing.GroupLayout.DEFAULT_SIZE, 1213, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chart1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );

        tabbedPaneCustom2.addTab("Biểu đồ", jPanel3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Số thự tự", "Thời gian", "Doanh thu", "Số hóa đơn", "Số khách hàng"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1213, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );

        tabbedPaneCustom2.addTab("Chi tiết", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(tabbedPaneCustom2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addComponent(tabbedPaneCustom2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(51, 51, 51))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExcelActionPerformed

    private void btnNgayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNgayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNgayActionPerformed

    private void btnThangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThangMouseClicked
        ThangTheoDoanhThu();
        setTextFieldOfMonth();
    }//GEN-LAST:event_btnThangMouseClicked

    private void btnNgayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNgayMouseClicked
        NgayTheoDoanhThu();
       // setTextFieldOfDay();
    }//GEN-LAST:event_btnNgayMouseClicked

    private void btnThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThangActionPerformed

  public void ThangTheoDoanhThu() {
    Date selectedDate = jDateChooser1.getDate();
    
    if (selectedDate == null) {
        System.out.println("Chưa chọn ngày");
        return; // Exit if no date is selected
    }

    chart1.clear();
    chart1.repaint();
    chart1.start();
    chart1.resetLegends();
    chart1.addLegend("Doanh Thu", new Color(245, 189, 135));

    Calendar calendar = Calendar.getInstance();
    calendar.setTime(selectedDate);
    int year = calendar.get(Calendar.YEAR);
    int month=calendar.get(Calendar.MONTH)+1;
    hd= new HoaDon_DAO();
    arrThang = new ArrayList<>();
    cthd = new ChiTietHoaDon_DAO();
    arrThang = hd.getDoanhThuTheoThang(year);

    System.out.println("Số lượng bản ghi lấy được: " + arrThang.size());

    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear old data
    int soKh=hd.getSoLuongKhachHangThang(month,year);
    int countHoaDon=hd.getSizeOfMonth(month, year);
    DecimalFormat df = new DecimalFormat("#,##0");
    ThangVaDoanhThu highestMonth = null;
    ThangVaDoanhThu lowestMonth = null;
    double maxRevenue = Double.MIN_VALUE;
    double minRevenue = Double.MAX_VALUE;
    double price=0;
    int rowIndex = 1;
    for (ThangVaDoanhThu monthRevenue : arrThang) {
        Object[] row = {
            rowIndex++,
            monthRevenue.getThang() + "/" + year,
            df.format(monthRevenue.getDoanhThu()) + " VND",
            hd.getSoLuongKhachHangThang(monthRevenue.getThang(),year),
            hd.getSizeOfMonth(monthRevenue.getThang(), year)
            
        };
        if(monthRevenue.getThang()==month)
            price=monthRevenue.getDoanhThu();
        model.addRow(row);

        chart1.addData(new ModelChart(String.valueOf(monthRevenue.getThang()), new double[]{monthRevenue.getDoanhThu()}));

        if (monthRevenue.getDoanhThu() > maxRevenue) {
            maxRevenue = monthRevenue.getDoanhThu();
            highestMonth = monthRevenue;
        }
        if (monthRevenue.getDoanhThu() < minRevenue) {
            minRevenue = monthRevenue.getDoanhThu();
            lowestMonth = monthRevenue;
        }
    }

    model.fireTableDataChanged();

    if (highestMonth != null) {
        lbCaoNhat.setText("Tháng "+highestMonth.getThang() + ": " + df.format(highestMonth.getDoanhThu()) + " VND");
    }
    if (lowestMonth != null) {
        lbThapNhat.setText("Tháng "+lowestMonth.getThang() + ": " + df.format(lowestMonth.getDoanhThu()) + " VND");
    }
    double chiTieu= price/hd.getDoanhThuCuaNam( year);
    
    double chiTieuHoaDon=countHoaDon*1.0/hd.getSizeOfYear(year);
    chiTieu*=100;
    chiTieuHoaDon=chiTieuHoaDon*100;
    
    double chiTieuKH= soKh*1.0/hd.getSoLuongKhachHangNam( year);
    chiTieuKH*=100;
    card1.setData(new ModelCard("Doanh thu tháng "+month, price, (int) chiTieu, null));
    card2.setDataNormal(new ModelCard("Số hóa đơn tháng " + month, countHoaDon,(int) chiTieuHoaDon, null));
    card3.setDataNormal(new ModelCard("Số khách hàng tháng " + month, soKh, (int)chiTieuKH, null));
      System.out.println(chiTieuHoaDon+"?"+hd.getSizeOfYear(year)+"/"+countHoaDon );
}
  
   public void NgayTheoDoanhThu() {
    Date selectedDate = jDateChooser1.getDate();
    
    if (selectedDate == null) {
        System.out.println("Chưa chọn ngày");
        return; // Exit if no date is selected
    }

    chart1.clear();
    chart1.repaint();
    chart1.start();
    chart1.resetLegends();
    chart1.addLegend("Doanh Thu", new Color(245, 189, 135));

    Calendar calendar = Calendar.getInstance();
    calendar.setTime(selectedDate);
    int year = calendar.get(Calendar.YEAR);
    int month = calendar.get(Calendar.MONTH)+1;
    int day = calendar.get(Calendar.DAY_OF_MONTH);
    double price=0;
    arrThang = new ArrayList<>();
    cthd = new ChiTietHoaDon_DAO();
    arrThang = hd.getDoanhThuTheoNgay( month, year);

    System.out.println("Số lượng bản ghi lấy được: " + arrThang.size());

    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear old data

    DecimalFormat df = new DecimalFormat("#,##0");
    ThangVaDoanhThu highestMonth = null;
    ThangVaDoanhThu lowestMonth = null;
    double maxRevenue = Double.MIN_VALUE;
    double minRevenue = Double.MAX_VALUE;

    int rowIndex = 1;
    for (ThangVaDoanhThu monthRevenue : arrThang) {
        Object[] row = {
            rowIndex++,
            monthRevenue.getThang() + "/"+month+"/" + year,
            df.format(monthRevenue.getDoanhThu()) + " VND",
            hd.getSizeHoaDonTheoNgay(monthRevenue.getThang(),month, year),
            hd.getSoLuongKhachHangNgay(monthRevenue.getThang(), month, year),
            
            
        };
        if(monthRevenue.getThang()==month)
            price=monthRevenue.getDoanhThu();
        model.addRow(row);

        chart1.addData(new ModelChart(String.valueOf(monthRevenue.getThang()), new double[]{monthRevenue.getDoanhThu()}));

        if (monthRevenue.getDoanhThu() > maxRevenue) {
            maxRevenue = monthRevenue.getDoanhThu();
            highestMonth = monthRevenue;
        }
        if (monthRevenue.getDoanhThu() < minRevenue) {
            minRevenue = monthRevenue.getDoanhThu();
            lowestMonth = monthRevenue;
        }
    }

    model.fireTableDataChanged();
    
    if (highestMonth != null) {
        lbCaoNhat.setText("Ngày "+highestMonth.getThang() + ": " + df.format(highestMonth.getDoanhThu()) + " VND");
    }
    if (lowestMonth != null) {
        lbThapNhat.setText("Ngày "+lowestMonth.getThang() + ": " + df.format(lowestMonth.getDoanhThu()) + " VND");
    }
    int soKh=hd.getSoLuongKhachHangNgay(day,month,year);
    int countHoaDon=hd.getSizeHoaDonTheoNgay(day,month, year);
    double chiTieu= price/hd.getDoanhThuCuaNam( year);
    
    double chiTieuHoaDon=countHoaDon*1.0/hd.getSizeOfMonth(month, year);
    chiTieu*=100;
    chiTieuHoaDon=chiTieuHoaDon*100;
    
    double chiTieuKH= soKh*1.0/hd.getSoLuongKhachHangThang(month, year);
    chiTieuKH*=100;
    card1.setData(new ModelCard("Doanh thu ngày "+ day+" tháng "+month, price, (int) chiTieu, null));
    card2.setDataNormal(new ModelCard("Số hóa đơn ngày " + day+" tháng "+month, countHoaDon,(int) chiTieuHoaDon, null));
    card3.setDataNormal(new ModelCard("Số khách hàng ngày " + day +" tháng "+ month , soKh, (int)chiTieuKH, null));
}
  

    public void setTextFieldOfMonth(){
        hd= new HoaDon_DAO();
        Date ngay = jDateChooser1.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(ngay);
        int year = calendar.get(Calendar.YEAR);
        int month= calendar.get(Calendar.MONTH)+1;
        int countHD=hd.getSizeOfMonth(month, year);
        //System.out.println(countHD+"/"+year+"/"+month);
    //    txtTongSoHoaDon.setText(String.valueOf(countHD));
    }
//    public void setTextFieldOfDay(){
//        hd= new HoaDon_DAO();
//        Date ngay = jDateChooser1.getDate();
//        Calendar calendar = Calendar.getInstance();
//        calendar.setTime(ngay);
//        int year = calendar.get(Calendar.YEAR);
//        int month= calendar.get(Calendar.MONTH)+1;
//        int day=calendar.get(Calendar.DAY_OF_MONTH);
//        int countHD=hd.getSizeHoaDonTheoNgay(day,month, year);
//        System.out.println(countHD+"/"+year+"/"+month);
//        txtTongSoHoaDon.setText(String.valueOf(countHD));
//        System.out.println("ngay"+day+"/"+month+"/"+year);
//    }
     private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        chart1.start();
    } 
    
    private void initCardData() {
        card1.setColorGradient(new java.awt.Color(211, 28, 215));
        card2.setBackground(new java.awt.Color(10, 30, 214));

        card2.setColorGradient(new java.awt.Color(72, 111, 252));
        card3.setBackground(new java.awt.Color(194, 85, 1));

        card3.setColorGradient(new java.awt.Color(255, 212, 99));   
//       Icon icon1 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.PEOPLE, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
        
 //      Icon icon2 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.MONETIZATION_ON, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
        
 //       Icon icon3 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.SHOPPING_BASKET, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
 //       card3.setData(new ModelCard("Expense", 3000, 80, icon3));
//        Icon icon4 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.BUSINESS_CENTER, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card4.setData(new ModelCard("Other Income", 550, 95, icon4));
    }
    public static void main(String[] args) {
        try {
        JFrame frame = new JFrame();
        ThongKeDoanhThu panel = new ThongKeDoanhThu(); // Khởi tạo panel
        frame.add(panel);
        frame.setTitle("Thống Kê Thuốc");
        frame.setSize(1000, 800);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    } catch (SQLException e) {
        e.printStackTrace(); // In ra lỗi nếu có
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnNgay;
    private javax.swing.JButton btnThang;
    private card.Card card1;
    private card.Card card2;
    private card.Card card3;
    private gui.chart.Chart chart1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbCaoNhat;
    private javax.swing.JLabel lbThapNhat;
    private gui.swing.ShadowRenderer shadowRenderer1;
    private gui.swing.TabbedPaneCustom tabbedPaneCustom1;
    private gui.swing.TabbedPaneCustom tabbedPaneCustom2;
    // End of variables declaration//GEN-END:variables
}
