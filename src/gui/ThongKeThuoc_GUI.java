/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import card.ModelCard;
import connect.ConnectDB;
import dao.ChiTietHoaDon_DAO;
import dao.Thuoc_DAO;
import entity.Thuoc;
import entity.ThuocVaLuotBan;
import entity.ThuocvaDoanhThu;
import gui.chart.Chart;
import gui.chart.ModelChart;
import java.awt.Color;

import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;

import java.util.List;

import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ThongKeThuoc_GUI extends javax.swing.JPanel {

    private static List<Thuoc> list;
    private static Thuoc_DAO ds;
    private static ChiTietHoaDon_DAO cthd;
    private static ChiTietHoaDon_DAO cthd1;
    private static List<Thuoc> list1;
    private static Thuoc_DAO ds1;
    private static ThuocVaLuotBan thuocvaluotban;

    public ThongKeThuoc_GUI() throws SQLException {
        initComponents();
        ConnectDB.connect();
        //chart1.addLegend("Doanh Thu", new Color(245, 189, 135));
        //chart1.addLegend("Lượt Bán", new Color(135, 189, 245));
        // updateTableData();
        updateTableData();
        initCardData();
        // Bang();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        btnDoanhThu = new javax.swing.JButton();
        btnLuotBan = new javax.swing.JButton();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        tabbedPaneCustom1 = new gui.swing.TabbedPaneCustom();
        chart1 = new gui.chart.Chart();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableThuoc = new javax.swing.JTable();
        card1 = new card.Card();
        card2 = new card.Card();
        jLabel14 = new javax.swing.JLabel();
        lbCaoNhat = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lbThapNhat = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        setEnabled(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jLabel2.setText("Lọc theo năm:");

        jLabel3.setText("Lọc theo tháng:");

        btnDoanhThu.setText("Doanh thu ");
        btnDoanhThu.setActionCommand("Doanh thu sản phẩm");
        btnDoanhThu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDoanhThuMouseClicked(evt);
            }
        });
        btnDoanhThu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoanhThuActionPerformed(evt);
            }
        });

        btnLuotBan.setText("Lượt bán");
        btnLuotBan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLuotBanMouseClicked(evt);
            }
        });
        btnLuotBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuotBanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDoanhThu)
                    .addComponent(btnLuotBan))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDoanhThu))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLuotBan))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        tabbedPaneCustom1.addTab("tab1", chart1);

        tableThuoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã thuốc", "Tên thuốc", "Số lượng bán", "Thuế", "Giá", "Tổng tiền"
            }
        ));
        jScrollPane2.setViewportView(tableThuoc);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 971, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPaneCustom1.addTab("tab2", jPanel4);

        jLabel14.setText("Cao nhất:");

        lbCaoNhat.setText("0");

        jLabel15.setText("Thấp nhất:");

        lbThapNhat.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbCaoNhat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15))
                    .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lbThapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPaneCustom1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(lbCaoNhat)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lbThapNhat))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPaneCustom1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoanhThuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoanhThuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDoanhThuActionPerformed

    private void btnLuotBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuotBanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLuotBanActionPerformed

    private void btnDoanhThuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDoanhThuMouseClicked
        chart1.clear();
        updateDoanhThu();

    }//GEN-LAST:event_btnDoanhThuMouseClicked

    private void btnLuotBanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLuotBanMouseClicked
        chart1.clear();
        updateLuotBan();
    }//GEN-LAST:event_btnLuotBanMouseClicked
    public void updateLuotBan() {
        //   chart1= new Chart();
        chart1.clear();
        chart1.repaint();
        chart1.start();
        chart1.resetLegends();
        // chart1.addLegend("Doanh Thu", new Color(245, 189, 135));
        chart1.addLegend("Lượt Bán", new Color(135, 189, 245));
        Thuoc max = null;
        int luotBanMax = 0;
        Thuoc min = null;
        int luotBanMin = 1000000000;
        ds = new Thuoc_DAO();
        cthd = new ChiTietHoaDon_DAO();
        list = new ArrayList<Thuoc>();
        int thang = jMonthChooser1.getMonth() + 1; // Tháng trong JMonthChooser bắt đầu từ 0
        int nam = jYearChooser1.getYear();
        System.out.println(thang + "" + nam);
        // Lấy danh sách thuốc có lượt bán cao nhất trong tháng
        ArrayList<ThuocVaLuotBan> arrthuocvaluotban = cthd.getThuocCoLuotBanCaoNhatTrongThang(thang, nam);

        // Kiểm tra danh sách thuốc
        System.out.println("Danh sách thuốc có lượt bán cao nhất: " + arrthuocvaluotban);

        // Khởi tạo danh sách thuốc
        list.clear(); // Clear previous data
        for (ThuocVaLuotBan thuocVaLuotBan : arrthuocvaluotban) {
            if (thuocVaLuotBan != null && thuocVaLuotBan.getThuoc() != null) {
                list.add(thuocVaLuotBan.getThuoc());
            }
            if (luotBanMax < thuocVaLuotBan.getLuotBan()) {
                luotBanMax = thuocVaLuotBan.getLuotBan();
                max = thuocVaLuotBan.getThuoc();
            }
            if (luotBanMin > thuocVaLuotBan.getLuotBan()) {
                luotBanMin = thuocVaLuotBan.getLuotBan();
                min = thuocVaLuotBan.getThuoc();
            }
        }
        try {
            lbCaoNhat.setText(max.getTenThuoc());
            lbThapNhat.setText(min.getTenThuoc());
        } catch (Exception e) {
            System.out.println("Khong cô thuoc");
        }
        
        System.out.println("Danh sách thuốc sau khi thêm: " + list);

        // Assuming you have a JTable and a DefaultTableModel
        DefaultTableModel model = (DefaultTableModel) tableThuoc.getModel();
        model.setRowCount(0);  // Clear existing data in the table
        DecimalFormat df = new DecimalFormat("#,##0.##");
        // Cập nhật bảng với dữ liệu mới
        int loaiThuoc=0;
        for (Thuoc thuoc : list) {
            if (thuoc != null) {
                Object[] row = {
                    thuoc.getMaThuoc(),
                    thuoc.getTenThuoc(),
                    cthd.getsoLuongBan(thuoc.getMaThuoc()),
                    thuoc.getThue(),
                    df.format(thuoc.getGia())+" VND",
                    df.format(cthd.getDoanhThu(thuoc.getMaThuoc()))+" VND"
                };
                loaiThuoc++;
                // Thêm dữ liệu vào biểu đồ
                double soLuongBan = cthd.getsoLuongBan(thuoc.getMaThuoc());
                chart1.addData(new ModelChart(thuoc.getTenThuoc(), new double[]{soLuongBan}));
                System.out.println("Số lượng bán cho thuốc " + thuoc.getMaThuoc() + ": " + soLuongBan);

                // Thêm hàng vào model bảng
                model.addRow(row);
            }
        }
        card1.setDataNormal(new ModelCard("Số loại thuốc được ban", loaiThuoc, 0, null));
    }

    public void updateDoanhThu() {
        chart1.clear();
        chart1.repaint();
        chart1.start();
        chart1.resetLegends();
        chart1.addLegend("Doanh Thu", new Color(245, 189, 135));

        ds = new Thuoc_DAO();
        cthd = new ChiTietHoaDon_DAO();
        list = new ArrayList<Thuoc>();
        DecimalFormat df = new DecimalFormat("#,##0.##");
        
        int thang = jMonthChooser1.getMonth() + 1; // Tháng trong JMonthChooser bắt đầu từ 0
        int nam = jYearChooser1.getYear();
        System.out.println(thang + "" + nam);
        Thuoc max = null;
        double doanhThuMax = 0;
        Thuoc min = null;
        double doanhThuMin = 1000000000;
        // Lấy danh sách thuốc có doanh thu cao nhất trong tháng
        ArrayList<ThuocvaDoanhThu> arrthuocvadoanhthu = cthd.getThuocCoDoanhThuCaoNhatTrongThang(thang, nam);

        // Kiểm tra danh sách thuốc
        System.out.println("Danh sách thuốc có doanh thu cao nhất: " + arrthuocvadoanhthu);

        // Khởi tạo danh sách thuốc
        list.clear(); // Clear previous data
        for (ThuocvaDoanhThu thuocVaDoanhThu : arrthuocvadoanhthu) {
            if (thuocVaDoanhThu != null && thuocVaDoanhThu.getThuoc() != null) {
                list.add(thuocVaDoanhThu.getThuoc());
            }
        }

        System.out.println("Danh sách thuốc sau khi thêm: " + list);

        // Assuming you have a JTable and a DefaultTableModel
        DefaultTableModel model = (DefaultTableModel) tableThuoc.getModel();
        model.setRowCount(0);  // Clear existing data in the table

        // Cập nhật bảng với dữ liệu mới
        for (Thuoc thuoc : list) {
            if (thuoc != null) {
                Object[] row = {
                    thuoc.getMaThuoc(),
                    thuoc.getTenThuoc(),
                    cthd.getsoLuongBan(thuoc.getMaThuoc()),
                    thuoc.getThue(),
                    df.format(thuoc.getGia())+" VND",
                    df.format(cthd.getDoanhThu(thuoc.getMaThuoc()))+" VND" // Thêm doanh thu vào hàng
                };
                if (doanhThuMax < cthd.getDoanhThu(thuoc.getMaThuoc())) {
                    doanhThuMax = cthd.getDoanhThu(thuoc.getMaThuoc());
                    max = thuoc;
                }
                if (doanhThuMin > cthd.getDoanhThu(thuoc.getMaThuoc())) {
                    doanhThuMin = cthd.getDoanhThu(thuoc.getMaThuoc());
                    min = thuoc;
                }
                // Thêm dữ liệu vào biểu đồ
                double doanhThu = cthd.getDoanhThu(thuoc.getMaThuoc());
                chart1.addData(new ModelChart(thuoc.getTenThuoc(), new double[]{doanhThu}));
                System.out.println("Doanh thu cho thuốc " + thuoc.getMaThuoc() + ": " + doanhThu);

                // Thêm hàng vào model bảng
                model.addRow(row);
            }
        }
        lbCaoNhat.setText(max.getTenThuoc());
        lbThapNhat.setText(min.getTenThuoc());
    }

    public void updateTableData() {
        chart1.clear();
        chart1.repaint();
        chart1.start(); // Bắt đầu biểu đồ
        chart1.resetLegends();
        chart1.addLegend("Doanh Thu", new Color(245, 189, 135));
        // chart1.addLegend("Lượt Bán", new Color(135, 189, 245));
        ds = new Thuoc_DAO(); // Khởi tạo DAO cho thuốc
        list = ds.getAllThuoc(); // Lấy danh sách tất cả thuốc
        cthd = new ChiTietHoaDon_DAO(); // Khởi tạo DAO cho chi tiết hóa đơn

        // Kiểm tra và in ra danh sách thuốc
        if (list == null || list.isEmpty()) {
            System.out.println("Danh sách thuốc trống hoặc không hợp lệ.");
            return; // Không tiếp tục nếu danh sách rỗng
        }

        System.out.println("Danh sách thuốc: " + list);

        // Assuming you have a JTable and a DefaultTableModel
        DefaultTableModel model = (DefaultTableModel) tableThuoc.getModel();
        model.setRowCount(0);  // Clear existing data in the table
        Thuoc max = null;
        double doanhThuMax = 0;
        Thuoc min = null;
        double doanhThuMin = 1000000000;
        DecimalFormat df = new DecimalFormat("#,##0.##");
        // Cập nhật bảng với dữ liệu thuốc
        for (Thuoc thuoc : list) {
            if (thuoc != null) {
                // Lấy số lượng bán và doanh thu
                double soLuongBan = cthd.getsoLuongBan(thuoc.getMaThuoc());
                double doanhThu = cthd.getDoanhThu(thuoc.getMaThuoc());
                if (doanhThuMax < doanhThu) {
                    doanhThuMax = doanhThu;
                    max = thuoc;
                }
                if (doanhThuMin > doanhThu) {
                    doanhThuMin = doanhThu;
                    min = thuoc;
                }
                Object[] row = {
                    thuoc.getMaThuoc(),
                    thuoc.getTenThuoc(),
                    soLuongBan,
                    thuoc.getThue(),
                    df.format(thuoc.getGia())+" VND",
                   df.format(doanhThu)+" VND"
                };

                // Thêm dữ liệu vào biểu đồ
                chart1.addData(new ModelChart(thuoc.getTenThuoc(), new double[]{doanhThu}));
                //System.out.println("Doanh thu cho thuốc " + thuoc.getTenThuoc() + ": " + doanhThu);
                System.out.println("Số lượng bán cho thuốc " + thuoc.getTenThuoc() + ": " + soLuongBan);

                // Thêm hàng vào model bảng
                model.addRow(row);
            } else {
                System.out.println("Đối tượng thuốc là null, không thể thêm vào bảng.");
            }
        }
        lbCaoNhat.setText(max.getTenThuoc());
        lbThapNhat.setText(min.getTenThuoc());
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        chart1.start();
    }
    private void initCardData() {
        card1.setColorGradient(new java.awt.Color(211, 28, 215));
        card2.setBackground(new java.awt.Color(10, 30, 214));

        card2.setColorGradient(new java.awt.Color(72, 111, 252));
          
//       Icon icon1 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.PEOPLE, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
        
 //      Icon icon2 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.MONETIZATION_ON, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
        
 //       Icon icon3 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.SHOPPING_BASKET, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
 //       card3.setData(new ModelCard("Expense", 3000, 80, icon3));
//        Icon icon4 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.BUSINESS_CENTER, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card4.setData(new ModelCard("Other Income", 550, 95, icon4));
    }
    public static void main(String[] args) {
        try {
            JFrame frame = new JFrame();
            ThongKeThuoc_GUI panel = new ThongKeThuoc_GUI(); // Khởi tạo panel
            frame.add(panel);
            frame.setTitle("Thống Kê Thuốc");
            frame.setSize(1000, 800);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace(); // In ra lỗi nếu có
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoanhThu;
    private javax.swing.JButton btnLuotBan;
    private card.Card card1;
    private card.Card card2;
    private gui.chart.Chart chart1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JLabel lbCaoNhat;
    private javax.swing.JLabel lbThapNhat;
    private gui.swing.TabbedPaneCustom tabbedPaneCustom1;
    private javax.swing.JTable tableThuoc;
    // End of variables declaration//GEN-END:variables
}
